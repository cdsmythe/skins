{"version":3,"sources":["Uuid.js","App.js","serviceWorker.js","index.js"],"names":["UUID","zip","require","uuid1","uuidv4","uuid2","skin","document","querySelector","value","temp","image","files","imageName","name","version","parseInt","skinjson","manifest","lang","JSON","stringify","file","binary","generateAsync","type","then","blob","saveAs","className","for","id","aria-describedby","placeholder","accept","onClick","this","handleButtonClick","React","Component","App","style","textAlign","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aca7226a.chunk.js","sourcesContent":["import React, { Component} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { saveAs } from 'file-saver';\n\n class UUID extends React.Component {\n\n   handleButtonClick() {\n\n    let JSZip = require(\"jszip\");\n    let zip = new JSZip();\n    let uuid1 = uuidv4();\n    let uuid2 = uuidv4();\n    let skin = document.querySelector('#skin-name').value;\n    let temp = document.querySelector('#temp-name').value;\n    let image = document.querySelector('#image-id').files[0];\n    let imageName = document.querySelector('#image-id').files[0].name; \n    let version = document.querySelector('#version').value;\n    version = parseInt(version, 10);\n\n    // on button click try and export as json file\n    let skinjson =    \n      {\n        \"skins\":[\n           {\n              \"localization_name\":`${skin}`,\n              \"geometry\":\"geometry.humanoid.custom\",\n              \"texture\":`${imageName}`,\n              \"type\":\"free\"\n           }\n        ], \"serialize_name\":`${temp}`,\n        \"localization_name\":`${temp}`\n    }\n\n    let manifest = \n      {\n        \"format_version\": 1,\n        \"header\": {\n            \"name\": `${temp}`,\n            \"uuid\": `${uuid1}`,\n            \"version\": [\n                version,0,0\n            ]\n        },\n        \"modules\": [\n            {\n                \"type\": \"skin_pack\",\n                \"uuid\": `${uuid2}`,\n                \"version\": [\n                  version,0,0\n                ]\n            }\n        ]\n    }\n\n  let lang = `skinpack.${temp}=${temp}\n  skin.${temp}.${skin} name=${skin}\n  `\n  skinjson = JSON.stringify(skinjson)\n  manifest = JSON.stringify(manifest)\n\n  // create a file and a folder\n  zip.file(`${temp}/skins.json`, `${skinjson}`);\n  zip.file(`${temp}/manifest.json`, `${manifest}`);\n  zip.file(`${temp}/texts/en_US.lang`,`${lang}`)\n  zip.file(`${temp}/${imageName}`,image,{binary:true});\n\n  // zip then download\n  zip.generateAsync({type:\"blob\"})\n  .then(function (blob) {\n      saveAs(blob, `${temp}.mcpack`);\n  });\n\n};\n\n  render() {\n\n    return (\n\n      <div className=\"form-group\">\n        <label for=\"\">Name for Skin</label>\n        <input type=\"text\" className=\"form-control\" name=\"\" id=\"skin-name\" aria-describedby=\"helpId\" placeholder=\"\" />\n        <label for=\"\">Template Name</label>\n        <input type=\"text\" className=\"form-control\" name=\"\" id=\"temp-name\" aria-describedby=\"helpId\" placeholder=\"\" />\n        <label for=\"\">Version Number</label>\n        <input type=\"text\" className=\"form-control\" name=\"\" id=\"version\" aria-describedby=\"helpId\" placeholder=\"\" />\n        <br></br>\n\n        {/* need to do some form validation stuff on this  */}\n        <label for=\"\">Image Upload</label>\n        <input type=\"file\" className=\"form-control\" name=\"png\" id=\"image-id\" accept=\".png\" aria-describedby=\"helpId\" placeholder=\"\" /> \n\n        <br></br>\n        <br />\n\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleButtonClick}>\n          Submit\n        </button>\n\n      </div>\n\n    );\n  }\n}\n\nexport default UUID;","import React from \"react\";\nimport UUID from \"./Uuid\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nfunction App() {\n\nreturn (\n\n  <div className=\"App\">\n    <div className=\"container\">\n      <header className=\"App-header\">\n        <br />\n\n        <div className=\"jumbotron\">\n          <h1 className=\"display-3\" style={{ textAlign: \"center\" }}>\n            Skinpack creator for Minecraft \n          </h1>\n\n          <hr className=\"my-2\" />\n        </div>\n      </header>\n\n      {/* test  asdf */}\n      <p>Edit a custom skin, fill out the name for your skin, template, and version number then upload your custom skin image file as a .png then press submit.</p>\n      <p style={{ textAlign: \"center\" }}>\n        You can edit Minecraft skins and download the PNG files\n        <a href=\"https://www.minecraftskins.net/\" target=\"_blank\"> here </a>.\n      </p>\n      <br></br>\n\n      <UUID></UUID>\n\n    <p>*This Web Application is not endorsed by or affiliated with Mojang, Microsoft or Minecraft</p>\n    </div>\n  </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}